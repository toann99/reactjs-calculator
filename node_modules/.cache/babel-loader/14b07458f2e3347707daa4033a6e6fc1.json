{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Toan Chelsea\\\\Downloads\\\\6.calculator-react-typescript-master\\\\calculator-react-typescript-master\\\\src\\\\components\\\\App\\\\App.tsx\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Display from '../Display/Display';\nimport Pad from '../Pad/Pad';\nconst StyledApp = styled.div`\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\" ,Arial ,sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  width: 100%;\n  max-width: 320px;\n`;\nexport const App = () => {\n  // Calculator's states\n  const [memory, setMemory] = useState(0);\n  const [result, setResult] = useState(0);\n  const [waitingForOperand, setWaitingForOperand] = useState(true);\n  const [pendingOperator, setPendingOperator] = useState();\n  const [display, setDisplay] = useState('0');\n\n  const calculate = (rightOperand, pendingOperator) => {\n    let newResult = result;\n\n    switch (pendingOperator) {\n      case '+':\n        newResult += rightOperand;\n        break;\n\n      case '-':\n        newResult -= rightOperand;\n        break;\n\n      case 'ร':\n        newResult *= rightOperand;\n        break;\n\n      case 'รท':\n        if (rightOperand === 0) {\n          return false;\n        }\n\n        newResult /= rightOperand;\n    }\n\n    setResult(newResult);\n    setDisplay(newResult.toString().toString().slice(0, 12));\n    return true;\n  }; // Pad buttons handlers\n\n\n  const onDigitButtonClick = digit => {\n    let newDisplay = display;\n\n    if (display === '0' && digit === 0 || display.length > 12) {\n      return;\n    }\n\n    if (waitingForOperand) {\n      newDisplay = '';\n      setWaitingForOperand(false);\n    }\n\n    if (display !== '0') {\n      newDisplay = newDisplay + digit.toString();\n    } else {\n      newDisplay = digit.toString();\n    }\n\n    setDisplay(newDisplay);\n  };\n\n  const onPointButtonClick = () => {\n    let newDisplay = display;\n\n    if (waitingForOperand) {\n      newDisplay = '0';\n    }\n\n    if (newDisplay.indexOf('.') === -1) {\n      newDisplay = newDisplay + '.';\n    }\n\n    setDisplay(newDisplay);\n    setWaitingForOperand(false);\n  };\n\n  const onOperatorButtonClick = operator => {\n    const operand = Number(display);\n\n    if (typeof pendingOperator !== 'undefined' && !waitingForOperand) {\n      if (!calculate(operand, pendingOperator)) {\n        return;\n      }\n    } else {\n      setResult(operand);\n    }\n\n    setPendingOperator(operator);\n    setWaitingForOperand(true);\n  };\n\n  const onChangeSignButtonClick = () => {\n    const value = Number(display);\n\n    if (value > 0) {\n      setDisplay('-' + display);\n    } else if (value < 0) {\n      setDisplay(display.slice(1));\n    }\n  };\n\n  const onEqualButtonClick = () => {\n    const operand = Number(display);\n\n    if (typeof pendingOperator !== 'undefined' && !waitingForOperand) {\n      if (!calculate(operand, pendingOperator)) {\n        return;\n      }\n\n      setPendingOperator(undefined);\n    } else {\n      setDisplay(operand.toString());\n    }\n\n    setResult(operand);\n    setWaitingForOperand(true);\n  };\n\n  const onAllClearButtonClick = () => {\n    setMemory(0);\n    setResult(0);\n    setPendingOperator(undefined);\n    setDisplay('0');\n    setWaitingForOperand(true);\n  };\n\n  const onClearPercentButtonClick = () => {\n    setResult(Number(display) / 100);\n    setWaitingForOperand(true);\n  };\n\n  return /*#__PURE__*/React.createElement(StyledApp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Display, {\n    value: display,\n    hasMemory: memory !== 0,\n    expression: typeof pendingOperator !== 'undefined' ? `${result}${pendingOperator}${waitingForOperand ? '' : display}` : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Pad, {\n    onDigitButtonClick: onDigitButtonClick,\n    onPointButtonClick: onPointButtonClick,\n    onOperatorButtonClick: onOperatorButtonClick,\n    onChangeSignButtonClick: onChangeSignButtonClick,\n    onEqualButtonClick: onEqualButtonClick,\n    onAllClearButtonClick: onAllClearButtonClick,\n    onClearPercentButtonClick: onClearPercentButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }));\n};\nexport default App;","map":{"version":3,"sources":["C:/Users/Toan Chelsea/Downloads/6.calculator-react-typescript-master/calculator-react-typescript-master/src/components/App/App.tsx"],"names":["React","useState","styled","Display","Pad","StyledApp","div","App","memory","setMemory","result","setResult","waitingForOperand","setWaitingForOperand","pendingOperator","setPendingOperator","display","setDisplay","calculate","rightOperand","newResult","toString","slice","onDigitButtonClick","digit","newDisplay","length","onPointButtonClick","indexOf","onOperatorButtonClick","operator","operand","Number","onChangeSignButtonClick","value","onEqualButtonClick","undefined","onAllClearButtonClick","onClearPercentButtonClick"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react'\nimport styled from 'styled-components'\nimport Display from '../Display/Display'\nimport Pad from '../Pad/Pad'\nimport { Digit, Operator } from '../../lib/types'\n\nconst StyledApp = styled.div`\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\" ,Arial ,sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  width: 100%;\n  max-width: 320px;\n`\n\nexport const App: FunctionComponent = () => {\n  // Calculator's states\n  const [memory, setMemory] = useState<number>(0)\n  const [result, setResult] = useState<number>(0)\n  const [waitingForOperand, setWaitingForOperand] = useState<boolean>(true)\n  const [pendingOperator, setPendingOperator] = useState<Operator>()\n  const [display, setDisplay] = useState<string>('0')\n\n  const calculate = (rightOperand: number, pendingOperator: Operator): boolean => {\n    let newResult = result\n\n    switch (pendingOperator) {\n      case '+':\n        newResult += rightOperand\n        break\n      case '-':\n        newResult -= rightOperand\n        break\n      case 'ร':\n        newResult *= rightOperand\n        break\n      case 'รท':\n        if (rightOperand === 0) {\n          return false\n        }\n\n        newResult /= rightOperand\n    }\n\n    setResult(newResult)\n    setDisplay(newResult.toString().toString().slice(0, 12))\n\n    return true\n  }\n\n  // Pad buttons handlers\n  const onDigitButtonClick = (digit: Digit) => {\n    let newDisplay = display\n\n    if ((display === '0' && digit === 0) || display.length > 12) {\n      return\n    }\n\n    if (waitingForOperand) {\n      newDisplay = ''\n      setWaitingForOperand(false)\n    }\n\n    if (display !== '0') {\n      newDisplay = newDisplay + digit.toString()\n    } else {\n      newDisplay = digit.toString()\n    }\n\n    setDisplay(newDisplay)\n  }\n\n  const onPointButtonClick = () => {\n    let newDisplay = display\n\n    if (waitingForOperand) {\n      newDisplay = '0'\n    }\n\n    if (newDisplay.indexOf('.') === -1) {\n      newDisplay = newDisplay + '.'\n    }\n\n    setDisplay(newDisplay)\n    setWaitingForOperand(false)\n  }\n\n  const onOperatorButtonClick = (operator: Operator) => {\n    const operand = Number(display)\n\n    if (typeof pendingOperator !== 'undefined' && !waitingForOperand) {\n      if (!calculate(operand, pendingOperator)) {\n        return\n      }\n    } else {\n      setResult(operand)\n    }\n\n    setPendingOperator(operator)\n    setWaitingForOperand(true)\n  }\n\n  const onChangeSignButtonClick = () => {\n    const value = Number(display)\n\n    if (value > 0) {\n      setDisplay('-' + display)\n    } else if (value < 0) {\n      setDisplay(display.slice(1))\n    }\n  }\n\n  const onEqualButtonClick = () => {\n    const operand = Number(display)\n\n    if (typeof pendingOperator !== 'undefined' && !waitingForOperand) {\n      if (!calculate(operand, pendingOperator)) {\n        return\n      }\n\n      setPendingOperator(undefined)\n    } else {\n      setDisplay(operand.toString())\n    }\n\n    setResult(operand)\n    setWaitingForOperand(true)\n  }\n\n  const onAllClearButtonClick = () => {\n    setMemory(0)\n    setResult(0)\n    setPendingOperator(undefined)\n    setDisplay('0')\n    setWaitingForOperand(true)\n  }\n\n  const onClearPercentButtonClick = () => {\n    setResult(Number(display)/100)\n    setWaitingForOperand(true)\n  }\n\n  return (\n    <StyledApp>\n      <Display value={display} hasMemory={memory !== 0} expression={typeof pendingOperator !== 'undefined' ? `${result}${pendingOperator}${waitingForOperand ? '' : display}` : ''} />\n      <Pad\n        onDigitButtonClick={onDigitButtonClick}\n        onPointButtonClick={onPointButtonClick}\n        onOperatorButtonClick={onOperatorButtonClick}\n        onChangeSignButtonClick={onChangeSignButtonClick}\n        onEqualButtonClick={onEqualButtonClick}\n        onAllClearButtonClick={onAllClearButtonClick}\n        onClearPercentButtonClick={onClearPercentButtonClick}\n\n      />\n    </StyledApp>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}